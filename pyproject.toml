[build-system]
requires = ["setuptools >= 61.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "plasticparcels"
description = "Package for simulating the transport and dispersion of plastics in the ocean."
readme = "README.md"
dynamic = ["version"]
authors = [{ name = "oceanparcels.org team" }]
requires-python = ">=3.8"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Education",
    "Intended Audience :: Education",
]
dependencies = [
    "parcels >= 3.0.2, < 4",
    "shapely",
    "geopandas",
    "pytest",
]

[project.urls]
homepage = "https://oceanparcels.org/"
repository = "https://github.com/OceanParcels/plasticparcels/"
tracker = "https://github.com/OceanParcels/plasticparcels/issues"

[tool.setuptools]
packages = ["plasticparcels"]

[tool.setuptools_scm]
write_to = "plasticparcels/_version_setup.py"
local_scheme = "no-local-version"

[tool.ruff.lint]
select = [
    "E",  # Error
    "F",  # pyflakes
    # "I",  # isort
    "B",  # Bugbear
    # "UP", # pyupgrade
    "LOG", # logging
    "ICN", # import conventions
    "G", # logging-format
    "RUF", # ruff
    "D",  # pydocstyle
    "DOC", # pydoclint
]

# If updating to use a formatter, look at https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules for rules to add to ignore
ignore = [
    # line too long (82 > 79 characters)
    "E501",
    # ‘from module import *’ used; unable to detect undefined names
    "F403",
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # Consider `(slice(2), *block)` instead of concatenation
    "RUF005",
    # Prefer `next(iter(variable.items()))` over single element slice
    "RUF015",
    # do not use bare except, specify exception instead
    "E722",
    # First line should be in imperative mood (requires writing of summaries)
    "D401",
    # 1 blank line required between summary line and description (requires writing of summaries)
    "D205",
    # Loop control variable `i` not used within loop body
    "B007",
    # Remove unused `noqa` directive
    "RUF100",
    # Ignore public module docstring
    "D100",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
